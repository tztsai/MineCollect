[project]
name = "minecollect-backend"
version = "0.1.0"
description = "AI-powered personal knowledge collector backend"
authors = [
    {name = "Caster K", email = "poetry.coder@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["ai", "knowledge", "collector", "fastapi", "postgresql"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pgvector-haystack>=3.3.1",
    "unstructured[all-docs]>=0.10.0",
    "haystack-ai>=2.0.0",
    "openai>=1.0.0",
    "openai-whisper>=20231117",
    "playwright>=1.40.0",
    "sentence-transformers>=2.2.0",
    "transformers>=4.30.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
    "Pillow>=10.0.0",
    "aiofiles>=23.0.0",
    "celery>=5.3.0",
    "redis>=5.0.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "ollama-haystack>=3.0.1",
    "poppler-utils>=0.1.0",
    "pandoc>=2.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "jupyter>=1.0.0",
    "ipython>=8.15.0",
]

[project.scripts]
minecollect-server = "backend.main:start_server"
minecollect-migrate = "backend.db.migrate:main"

[project.urls]
Homepage = "https://github.com/your-org/minecollect"
Repository = "https://github.com/your-org/minecollect.git"
Documentation = "https://github.com/your-org/minecollect#readme"
"Bug Tracker" = "https://github.com/your-org/minecollect/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["backend"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["backend"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "jupyter>=1.0.0",
    "ipython>=8.15.0",
] 
